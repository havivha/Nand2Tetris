// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    // get type of instruction
    Not(in=instruction[15], out=Ainstruction);                  
    Not(in=Ainstruction, out=Cinstruction);                     

    And(a=instruction[15], b=instruction[5], out=ALUtoA);       // C-inst and dest to A-reg?        
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=ARegIn);     

    Or(a=Ainstruction, b=ALUtoA, out=loadA);                    // load A if A-inst or C-inst&dest to A-reg                    
    ARegister(in=ARegIn, load=loadA, out=Aout, out[0..14]=addressM);                 
    
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);       // select A or M based on a-bit    

    And(a=instruction[15], b=instruction[4], out=loadD);           
    DRegister(in=ALUout, load=loadD, out=Dout);                 // load the D register from ALU                

    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, out=outM, zr=ZRout, ng=NGout);   // calculate
    
    // Set outputs for writing memory                      
    And(a=instruction[15], b=instruction[3], out=writeM);                     

    // calc PCload & PCinc - whether to load PC with A reg
    And(a=ZRout, b=instruction[1], out=jeq);        // is zero and jump if zero                              
    And(a=NGout, b=instruction[2], out=jlt);        // is neg and jump if neg                        
    Or(a=ZRout, b=NGout, out=zeroOrNeg);                       
    Not(in=zeroOrNeg, out=positive);                // is positive (not zero and not neg)                                
    And(a=positive, b=instruction[0], out=jgt);     // is pos and jump if pos                 
    Or(a=jeq, b=jlt, out=jle);                                  
    Or(a=jle, b=jgt, out=jumpToA);                  // load PC if cond met and jump if cond                              
    And(a=instruction[15], b=jumpToA, out=PCload);  // Only jump if C instruction                 
    Not(in=PCload, out=PCinc);                      // only inc if not load                                  
    PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}
